generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id              Int         @id @default(autoincrement())
  phone           String      @unique
  name            String
  avatar          String?
  disabled        Boolean     @default(false) // 계정 정지 시 true
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  products        Product[]
  posts           Post[]
  answers         Answer[]
  wonderings      Wondering[]
  writtenReviews  Review[]    @relation("writtenReviews")
  receivedReviews Review[]    @relation("receivedReviews")
  fav             Fav[]
  sales           Sale[]
  purchases       Purchase[]
  streams         Stream[]
  messages        Message[]
  login           Login?
  user            Join[]
  view            View[]
  manager         Manager?
  report          Report[]
  Wallet          Wallet?
}

model Login {
  email     String   @id
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId    Int      @unique

  @@index([userId])
}

// 관리자 명단
model Manager {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @id
}

model Product {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String     @db.MediumText
  name        String
  price       Int
  onSale      Boolean    @default(true) // true 판매중, false 판매완료or판매등록취소
  description String     @db.MediumText
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId  Int
  address     Address    @relation(fields: [addressId], references: [id], onDelete: SetNull)
  addressId   Int
  favs        Fav[]
  sales       Sale[]
  purchases   Purchase[]
  report      Report[]
  Room        Room[]
  latitude    Float?
  longitude   Float?

  @@index([userId])
  @@index([categoryId])
  @@index([addressId])
}

// 주소 (daum API 기준)
model Address {
  id        Int       @id // 시군구코드
  sido      String
  sigungu   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

// user 혹은 product 신고
model Report {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int? // 상품 신고 시 존재
  title       String
  description String?  @db.MediumText
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// 카테고리
model Category {
  id        Int       @id
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
  view      View[]
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model Post {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  question  String      @db.MediumText
  latitude  Float?
  longitude Float?
  answers   Answer[]
  wondering Wondering[]

  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText

  @@index([postId])
  @@index([userId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int

  @@index([postId])
  @@index([userId])
}

model Review {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  review       String    @db.MediumText
  createdBy    User      @relation("writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  Int
  createdFor   User      @relation("receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score        Int       @default(1)
  Sale         Sale?
  Purchase     Purchase?

  @@index([createdById])
  @@index([createdForId])
}

// 조회수
model View {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  viewCount  Int      @default(1)

  @@id([userId, categoryId])
}

// 판매정보, 구매자 id, 판매자는 product와 join
model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int?     @unique

  @@index([productId])
  @@index([userId])
  @@index([reviewId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  Int?     @unique

  @@index([productId])
  @@index([userId])
  @@index([reviewId])
}

model Stream {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  description   String    @db.MediumText
  price         Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  messages      Message[]
  cloudflareId  String
  cloudflareUrl String
  cloudflareKey String

  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int

  @@index([streamId])
  @@index([userId])
}

// 1대1 채팅방
model Room {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  join      Join[]

  @@index([productId])
}

model Join {
  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@id([roomId, userId])
  @@index([roomId])
  @@index([userId])
}

model Wallet {
  id                  Int                   @id @default(autoincrement())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  currency            Int
  user                User                  @relation(fields: [userId], references: [id])
  userId              Int                   @unique
  WalletChargeHistory WalletChargeHistory[]

  @@index([userId])
}

model WalletChargeHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amounts   Int
  wallet    Wallet   @relation(fields: [walletId], references: [id])
  walletId  Int

  @@index([walletId])
}
